# -*- coding: utf-8 -*-
"""Covid Analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Sz1zzSeto6r8tiOlurTrjXXlvVKztJD1

**Introduction**
<br>
<img src="https://images.ctfassets.net/hrltx12pl8hq/1Rbzpu1Sbood01BuTfK1Dz/8b652ada8a031cbcd9c51faff826dce5/Coronavirus_infographic.jpg?fit=fill&w=480&h=270">
<br>
COVID-19  is a disease caused by SARS-CoV-2 that can trigger what doctors call a respiratory tract infection, which made world stand still for months. 

Analysis COVID-19 Infections, Deaths and Vaccinations will give us more insight to the spread of virus in Canada and World, and how vaccination is helping us to slow down the spread of the virus.
"""

# Commented out IPython magic to ensure Python compatibility.
# %pip install --upgrade plotly

"""###Importing packages"""

import pandas as pd
import numpy as np
import plotly.express as px
import seaborn as sns
import matplotlib.pyplot as plt

"""###Notebook Presentation"""

pd.options.display.float_format = '{:,.2f}'.format

"""<h1>Analysis of Covid 19 - Cases and Deaths</h1>

###Read the data
"""

covid_death_data = pd.read_excel('covid_deaths.xlsx')

"""# Data Exploration & Cleaning

Preliminary data exploration. 
"""

covid_death_data.shape

"""The dataset consists of 26 columns and 124675!!!

Let's see what are the columns:
"""

covid_death_data.columns

covid_death_data.describe()

"""Let's analyze Covid data in Canada"""

covid_death_canada = covid_death_data[covid_death_data.location=='Canada']

covid_death_canada.shape

covid_death_canada.head()

covid_death_canada.describe()

"""From the early exploraion, we can see that the minimum number of covid cases in Canada was 1, which is the first case. The total number of cases at the time I got the data is 1.69M and total deaths as 28616.

### Duplicate and NaN values:
"""

covid_death_canada.duplicated().values.any()

covid_death_canada.isna().values.any()

covid_death_canada.isna().sum()

"""There are no duplicate rows, but we have NaN values. But upon checking further, we can see that those values belong to death and hospitalization related columns, which is good to be NaN

###Explore date when deaths are NaN
"""

col_subset = ['date','total_deaths',
              'new_deaths','reproduction_rate','icu_patients', 'hosp_patients', 'weekly_icu_admissions', 'weekly_hosp_admissions'   ]
covid_death_canada.loc[covid_death_canada.total_deaths.isna()][col_subset]

col_subset = ['date','total_deaths',
              'new_deaths','icu_patients', 'hosp_patients', 'weekly_icu_admissions', 'weekly_hosp_admissions'   ]
covid_death_canada.loc[covid_death_canada.new_deaths.isna()][col_subset]

"""###Converting date into datetime"""

covid_death_canada.date = pd.to_datetime(covid_death_canada.date)
covid_death_canada.head()

"""# Chance of getting infected in Canada"""

total_cases = pd.to_numeric(covid_death_canada.total_cases)
population = pd.to_numeric(covid_death_canada.population)
covid_death_canada['Chance of infection in %'] = (total_cases / population )*100
covid_death_canada.info()

"""Let's only look at columns related to cases and deaths"""

covid_death_canada = covid_death_canada[['date','new_cases', 'total_cases', 'new_deaths', 'total_deaths','Chance of infection in %' ,'population']]

covid_death_canada.head()

covid_death_canada.tail()

covid_death_canada.describe()

"""<h4>Seems like we have 4.45% chance of getting infected in Canada!!<h4>

# Chance of death after infection in Canada
"""

total_cases = pd.to_numeric(covid_death_canada.total_cases)
total_deaths = pd.to_numeric(covid_death_canada.total_deaths)
covid_death_canada['Chance of Death in %'] = (total_deaths / total_cases)*100
covid_death_canada.describe()

covid_death_canada.head()

covid_death_canada.tail()

"""<h4>From this, a person had a chance of death if infected upto 8.56% in Canada !!!<h4>

# Visualisation of the cases in Canada
"""

plt.figure(figsize=(16,8), dpi=200)
plt.title('Covid Cases in Canada over Time', fontsize=18)
plt.yticks(fontsize=14)

 
ax1 = plt.gca()
ax2 = ax1.twinx() # create second y-axis
  
ax1.plot(covid_death_canada.date,
         covid_death_canada.total_cases,  
        c='crimson', 
        linewidth=3,)
 
# Adding prize share plot on second axis
ax2.plot(covid_death_canada.date,
         covid_death_canada.new_cases,          
        c='blue', 
        linewidth=3,)
 
plt.show()

"""Analysing the graph, we can see the different waves in Canada

# Visualisation of the total deaths in Canada
"""

plt.figure(figsize=(16,8), dpi=200)
plt.title('Covid Deaths in Canada over Time', fontsize=18)
plt.yticks(fontsize=14)

 
ax1 = plt.gca()
ax2 = ax1.twinx() # create second y-axis
  
ax1.plot(covid_death_canada.date,
         covid_death_canada.total_cases,  
        c='crimson', 
        linewidth=3,)
 
# Adding prize share plot on second axis
ax2.plot(covid_death_canada.date,
         covid_death_canada.total_deaths,          
        c='blue', 
        linewidth=3,)
 
plt.show()

"""Here we can see total death (blue) plotted against total cases in Canada. Now let's analyse the total deaths and new_deaths"""

plt.figure(figsize=(16,8), dpi=200)
plt.title('Covid Deaths in Canada over Time', fontsize=18)
plt.yticks(fontsize=14)

 
ax1 = plt.gca()
ax2 = ax1.twinx() # create second y-axis
  
ax1.plot(covid_death_canada.date,
         covid_death_canada.total_deaths,  
        c='crimson', 
        linewidth=3,)
 
# Adding prize share plot on second axis
ax2.plot(covid_death_canada.date,
         covid_death_canada.new_deaths,          
        c='blue', 
        linewidth=3,)
 
plt.show()

"""We can see that new deaths have been decreasing after the second wave

# <h1> Covid Analysis - Vaccinations in Canada

Reading data
"""

covid_vaccination_data = pd.read_excel('covid_vaccinations.xlsx')

"""### Data Exploration & Cleaning
Preliminary data exploration.

"""

covid_vaccination_data.shape

covid_vaccination_data.columns

covid_vaccination_data.describe()

"""Let's analyse vaccination data in Canada"""

covid_vaccination_canada = covid_vaccination_data[covid_vaccination_data.location=='Canada']

covid_vaccination_canada.describe()

"""We can see almost 57.7 M people got vaccinated in Canada

### Duplicate and NaN values:
"""

covid_vaccination_canada.duplicated().values.any()

covid_vaccination_canada.isna().values.any()

covid_vaccination_canada.isna().sum()

"""We can see there are a lot of data, let's look only on cases, detahs and vaccination"""

covid_vaccination_canada = covid_vaccination_canada[['date','positive_rate' ,'total_vaccinations','new_vaccinations','total_boosters']]

covid_vaccination_canada.describe()

covid_vaccination_canada.isna().sum()

covid_vaccination_canada.head()

covid_vaccination_canada.tail()

"""We can see the NaN values are from the start of the pandemic.

# Cases, Deaths and Vaccination in Canada

Let's create a dataframe with data from both tables
"""

covid_analysis_canada = pd.merge(covid_death_canada, covid_vaccination_canada, on='date')

covid_analysis_canada.describe()

covid_analysis_canada.head()

covid_analysis_canada.tail()

covid_analysis_canada = covid_analysis_canada[['date','new_cases','total_cases','new_deaths','total_deaths','new_vaccinations','total_vaccinations','Chance of infection in %','Chance of Death in %']]

covid_analysis_canada.sample(n=10)

From the preliminary analysis, we can see that the Chance of Death in % after infection in Canada has decreased as the total_vaccinations got higher number. Let see this in charts!

"""# Visualization of New Cases vs Vaccination in Canada"""

plt.figure(figsize=(16,8), dpi=200)
plt.title('New Covid Cases vs Vaccination in Canada over Time', fontsize=18)
plt.yticks(fontsize=14)

 
ax1 = plt.gca()
ax2 = ax1.twinx() # create second y-axis
  
ax1.plot(covid_analysis_canada.date,
         covid_analysis_canada.new_cases,  
        c='crimson', 
        linewidth=3,)
 
# Adding prize share plot on second axis
ax2.plot(covid_analysis_canada.date,
         covid_analysis_canada.total_vaccinations,          
        c='blue', 
        linewidth=3,)
 
plt.show()

"""After vaccinations, the cases have been low mostly compared to covid waves before vaccinations. But Covid vaccines changes our risk of catching COVID-19 and becoming ill, It doesn't change your risk of exposure to the virus out in the community. That's why we can still see some peak towards the end

# Visualization of New Deaths vs Vaccination in Canada
"""

plt.figure(figsize=(16,8), dpi=200)
plt.title('New Covid Deaths vs Vaccination in Canada over Time', fontsize=18)
plt.yticks(fontsize=14)

 
ax1 = plt.gca()
ax2 = ax1.twinx() # create second y-axis
  
ax1.plot(covid_analysis_canada.date,
         covid_analysis_canada.new_deaths,  
        c='crimson', 
        linewidth=3,)
 
# Adding prize share plot on second axis
ax2.plot(covid_analysis_canada.date,
         covid_analysis_canada.total_vaccinations,          
        c='blue', 
        linewidth=3,)
 
plt.show()

"""<h2>Yes, new covid-related deaths have been reduced considerably after vaccinations!!!! <h2>

# Covid Analysis - World
"""

covid_death_data.describe()

"""# Countries with highest infection number"""

countries = covid_death_data.groupby(['location'])
countries.tail()

data_countries = countries.agg({'location':pd.Series.any,'total_cases': pd.Series.max, 'population': pd.Series.max})

data_countries.sample(n=10)

total_cases =  pd.to_numeric(data_countries.total_cases)
population =  pd.to_numeric(data_countries.population)
infection_rate = (total_cases/population)*100
data_countries['Infection rate in %'] = infection_rate
data_countries.sample(n=10)

data_countries.sort_values(['total_cases'], inplace=True)
data_countries = data_countries.dropna()
data_countries.tail(10)

"""Here we can see we also get the total_cases in World and continents here. Let's remove those."""

data_countries_only = data_countries[~data_countries.location.isin(['World','Asia', 'Europe', 'North America', 'South America', 'European Union', 'Africa', 'Oceanea'])]

"""## Top 20 countries with highest number of Covid cases"""

top20_countries = data_countries_only[-20:]

h_bar = px.bar(x=top20_countries.total_cases,
               y=top20_countries.location,
               orientation='h',
               color=top20_countries.total_cases,
               color_continuous_scale='Viridis',
               title='Top 20 Countries by Number of Cases')
 
h_bar.update_layout(xaxis_title='Number of Cases', 
                    yaxis_title='Country',
                    coloraxis_showscale=False)
h_bar.show()

"""## Top 20 countries with highest percentage of Covid cases

In the above chart, we only see the total cases in a country. Let's see what is the infection rate in reference with population.
"""

data_countries_only.sort_values(['Infection rate in %'], inplace=True)

top20_countries = data_countries_only[-20:]

h_bar = px.bar(x=top20_countries['Infection rate in %'],
               y=top20_countries.location,
               orientation='h',
               color=top20_countries['Infection rate in %'],
               color_continuous_scale='Viridis',
               title='Top 20 Countries by Infection rate')
 
h_bar.update_layout(xaxis_title='Percent of Cases', 
                    yaxis_title='Country',
                    coloraxis_showscale=False)
h_bar.show()

"""## Top 20 countries with Least number of Covid cases"""

top20_countries_least_cases = data_countries_only[0:20]

h_bar = px.bar(x=top20_countries_least_cases.total_cases,
               y=top20_countries_least_cases.location,
               orientation='h',
               color=top20_countries_least_cases.total_cases,
               color_continuous_scale='Viridis',
               title='Top 20 Countries with least Number of Cases')
 
h_bar.update_layout(xaxis_title='Number of Cases', 
                    yaxis_title='Country',
                    coloraxis_showscale=False)
h_bar.show()

"""# Visualising Total Number of Cases using a Choropleth Map"""

countries = covid_death_data.groupby(['location', 'iso_code'])
data_countries = countries.agg({'iso_code':pd.Series.any,'location':pd.Series.any,'total_cases': pd.Series.max})

data_countries.sort_values(['total_cases'], inplace=True)
data_countries = data_countries.dropna()
data_countries.tail(10)

data_countries_only = data_countries[~data_countries.location.isin(['World','Asia', 'Europe', 'North America', 'South America', 'European Union', 'Africa', 'Oceanea'])]

world_map = px.choropleth(data_countries_only,
                          locations='iso_code',
                          color='total_cases', 
                          hover_name='location', 
                          color_continuous_scale=px.colors.sequential.matter)
 
world_map.update_layout(coloraxis_showscale=True,)
 
world_map.show()

"""# Countries with highest deaths related to Covid-19"""

countries = covid_death_data.groupby(['location'])

data_countries = countries.agg({'location':pd.Series.any,'total_deaths': pd.Series.max,'total_cases': pd.Series.max, 'population': pd.Series.max})

data_countries.sample(n=10)

data_countries.sort_values(['total_deaths'], inplace=True)
data_countries = data_countries.dropna()
data_countries.tail(10)

"""Here we can see we also get the total_cases in World and continents here. Let's remove those."""

data_countries_only = data_countries[~data_countries.location.isin(['World','Asia', 'Europe', 'North America', 'South America', 'European Union', 'Africa', 'Oceanea'])]

"""## Top 20 countries with highest number of Covid Deaths"""

top20_countries = data_countries_only[-20:]

h_bar = px.bar(x=top20_countries.total_deaths,
               y=top20_countries.location,
               orientation='h',
               color=top20_countries.total_deaths,
               color_continuous_scale='Brwnyl',
               title='Top 20 Countries by Number of Deaths related to COVID-19')
 
h_bar.update_layout(xaxis_title='Number of Cases', 
                    yaxis_title='Country',
                    coloraxis_showscale=False)
h_bar.show()

"""## Top 20 countries with highest percentage of Covid Death

In the above chart, we only see the total deaths in a country. Let's see what is the death rate in reference with total cases.
"""

total_cases =  pd.to_numeric(data_countries.total_cases)
total_deaths =  pd.to_numeric(data_countries.total_deaths)
death_rate = (total_deaths/total_cases)*100
data_countries['Death rate in %'] = death_rate
data_countries.sample(n=10)

data_countries.sort_values(['Death rate in %'], inplace=True)
data_countries = data_countries.dropna()

top20_countries = data_countries[-20:]

h_bar = px.bar(x=top20_countries['Death rate in %'],
               y=top20_countries.location,
               orientation='h',
               color=top20_countries['Death rate in %'],
               color_continuous_scale='Viridis',
               title='Top 20 Countries by Death rate')
 
h_bar.update_layout(xaxis_title='Probability of Death', 
                    yaxis_title='Country',
                    coloraxis_showscale=False)
h_bar.show()

"""## Top 20 countries with Least number of Covid cases"""

top20_countries_least_cases = data_countries_only[0:20]

h_bar = px.bar(x=top20_countries_least_cases.total_deaths,
               y=top20_countries_least_cases.location,
               orientation='h',
               color=top20_countries_least_cases.total_deaths,
               color_continuous_scale='Viridis',
               title='Top 20 Countries with least Number of Covid Deaths')
 
h_bar.update_layout(xaxis_title='Number of Deaths', 
                    yaxis_title='Country',
                    coloraxis_showscale=False)
h_bar.show()

"""# Visualising Total Number of Cases using a Choropleth Map"""

countries = covid_death_data.groupby(['location', 'iso_code'])
data_countries = countries.agg({'iso_code':pd.Series.any,'location':pd.Series.any,'total_deaths': pd.Series.max})

data_countries.sort_values(['total_deaths'], inplace=True)
data_countries = data_countries.dropna()
data_countries.tail(10)

data_countries_only = data_countries[~data_countries.location.isin(['World','Asia', 'Europe', 'North America', 'South America', 'European Union', 'Africa', 'Oceanea'])]

world_map = px.choropleth(data_countries_only,
                          locations='iso_code',
                          color='total_deaths', 
                          hover_name='location', 
                          color_continuous_scale=px.colors.sequential.amp)
 
world_map.update_layout(coloraxis_showscale=True,)
 
world_map.show()

"""# Countries with highest vaccination number"""

countries = covid_vaccination_data.groupby(['location'])
data_countries = covid_death_data.groupby(['location'])

"""We are taking people vaccinated since total vacinations are going to be total of all the doses."""

vaccine_data_countries = countries.agg({'iso_code':pd.Series.any,'location':pd.Series.any,'people_vaccinated': pd.Series.max})
vaccine_data_countries.sample()
vaccine_data_countries.index.name = None
death_data_countries = data_countries.agg({'iso_code':pd.Series.any,'location':pd.Series.any,'population': pd.Series.max})
death_data_countries.index.name = None
countries_vaccine_population_data = pd.merge(death_data_countries, vaccine_data_countries, on=['location','iso_code'])

countries_vaccine_population_data = countries_vaccine_population_data[['iso_code', 'location', 'people_vaccinated', 'population']]

countries_vaccine_population_data.sample(n=5)

people_vaccinated =  pd.to_numeric(countries_vaccine_population_data.people_vaccinated)
population =  pd.to_numeric(countries_vaccine_population_data.population)
vaccination_rate = (people_vaccinated/population)*100
countries_vaccine_population_data['Vaccination rate in %'] = vaccination_rate
countries_vaccine_population_data.sample(n=5)

"""We can see the vaccination rates being higher than 110, because it is counting all the vaccine doses."""

countries_vaccine_population_data.sort_values(['Vaccination rate in %'], inplace=True)
countries_vaccine_population_data = countries_vaccine_population_data.dropna()
countries_vaccine_population_data.sample(5)

countries_vaccine_population_data.tail(5)

"""118.64% Vaccinated??? 
Gibraltar is an overseas territory of the United Kingdom and is self-governing in all matters but defense.

This vaccine rollout data is reported by the number of doses of coronavirus vaccines administered, not the number of people who have been vaccinated. Because most vaccines require two doses and many countries have different schedules to deliver the second dose, we don’t know with this data how many people have ultimately received both doses.
"""

countries_vaccine_population_data.sample(10)

"""Here we can see we also get the total_cases in World and continents here. Let's remove those."""

data_countries_only = countries_vaccine_population_data[~countries_vaccine_population_data.location.isin(['World','Asia', 'Europe', 'North America', 'South America', 'European Union', 'Africa', 'Oceanea'])]

"""## Top 20 countries with highest number of vaccination rates"""

top20_countries = data_countries_only[-20:]

h_bar = px.bar(x=top20_countries['Vaccination rate in %'],
               y=top20_countries.location,
               orientation='h',
               color=top20_countries['Vaccination rate in %'],
               color_continuous_scale='Aggrnyl',
               title='Top 20 Countries by Rate of Vaccination')
 
h_bar.update_layout(xaxis_title='Rate of Vaccination', 
                    yaxis_title='Country',
                    coloraxis_showscale=False)
h_bar.show()

"""## Top 20 countries with Least rate of vaccination"""

top20_countries_least_cases = data_countries_only[0:20]

h_bar = px.bar(x=top20_countries_least_cases['Vaccination rate in %'],
               y=top20_countries_least_cases.location,
               orientation='h',
               color=top20_countries_least_cases['Vaccination rate in %'],
               color_continuous_scale='Teal',
               title='Top 20 Countries with least rate of vaccinations')
 
h_bar.update_layout(xaxis_title='Rate of vaccination', 
                    yaxis_title='Country',
                    coloraxis_showscale=False)
h_bar.show()

"""# Visualising Rate of Vaccinations using a Choropleth Map"""

world_map = px.choropleth(data_countries_only,
                          locations='iso_code',
                          color='Vaccination rate in %', 
                          hover_name='location', 
                          color_continuous_scale=px.colors.sequential.Emrld)
 
world_map.update_layout(coloraxis_showscale=True,)
 
world_map.show()

"""<h3>We are in this together... Lets fight against COVID-19 by social distancing, hygiene, vaccine etc. </h3>

"Global Citizen has been a leading force in bringing together civil society and the private sector. We need citizens of the world to mobilize again. We need out-of-the-box thinking, and using all means available.'"
~ Ursula von der Leyen, President of the European Commission

<img src="https://www.itij.com/sites/default/files/styles/hero_image_small/public/2020-04/fighting-coronavirus-innovations.jpg?itok=fUeXj3aB">
"""